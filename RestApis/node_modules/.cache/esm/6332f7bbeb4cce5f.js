let Joi,exist,CustomErrorHandler,User;_eb4‍.x([["default",()=>_eb4‍.o]]);_eb4‍.w("joi",[["default",["Joi"],function(v){Joi=v}],["exist",["exist"],function(v){exist=v}]]);_eb4‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_eb4‍.w("../../models",[["User",["User"],function(v){User=v}]]);



const registerController={
    async register(req,res,next){
        //validation
        const registerSchema=Joi.object({
            name:Joi.string().min(3).max(30).required(),
            email:Joi.string().required().email(),
            password:Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
            repeat_password:Joi.ref('password')
        });
        const {error}=registerSchema.validate(req.body);
        _eb4‍.g.console.log(error);
        _eb4‍.g.console.log(req.body);
        if(error){
            return next(error);
        }

        //check if user already in the database
        try{
            const exsist=await User.exists({email:req.body.email});
            if(exist){
                return next(CustomErrorHandler.alreadyExist("Email Already Taken"))
            }
        }
        catch(err){
            return next(err);
        }
        res.json({msg:"Hello from register"})

    }
}

_eb4‍.d(registerController);