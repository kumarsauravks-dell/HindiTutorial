NodeJs + Express + MongoDb
Jwt Tokens + Upload Files to server 
-------------------------------------
1. Create a project
    - npm init -y
    - npm i express
    - npm i esm
    - npm i nodemon
    - npm i dotenv
    - create a .env file
        APP_PORT=5000
    - create a file config/index.js  (index.js because jaha bhi import krna hoga to file name nhi dena hoga bas .config)
        import dotenv from 'dotenv';
        dotenv.config();

        export const {
            APP_PORT
        } = process.env;
    
    - create a server.js file
        import express from 'express';
        import { APP_PORT } from './config';

        const app=express();
        app.listen(APP_PORT,()=> console.log(`Listening on port ${APP_PORT}`))
    
    - change the pakage.json - add a script for development
        "scripts": {
            "dev": "nodemon -r esm server.js",
            "start":"node -r esm server.js"
        }
-------------------------------------------------
- ToDo List 
    - List of end point we will create
        Register a user
        Login a user
        Who am i
        Add new product
        Update a product
        Get all products
        Get single product
        Delete a product

- Adding Routes for endpoints
    - Create a folder routes which contains index.js
        import express from 'express';
        const router=express.Router();
        export default router;
    - Add the router to server.js file
        import routes from './routes'
        app.use('/api',routes);
-------------------------------------------------
- Add a controller to handle req and res controllers/auth/registerController
    const registerController={
        register(req,res,next){
                res.json({msg:"Hello from register"})
            }
        }
    export default registerController;
- Add a index file to controller - controllers/index.js
    export {default as registerController} from './auth/registerController'

- Update the routes/index.js file
    import { registerController } from '../controllers';
    const router=express.Router();
    router.post('/register',registerController.register);
- Check using postman
    POST - http://localhost:5000/api/register
------------------------------------------------------
Install joi validation for validations
- checklist
    validate the request
    authorise the request
    check if user is in the database already
    prepare model
    store in database
    generate jwt token
    send response
-----------------------------------------------------
Validation 
    - npm i joi
    - create validation for the registration data in controllers/auth/registerController.js
        import Joi, { string } from "joi";
        const registerController={
            register(req,res,next){

                const registerSchema=Joi.object({
                    name:Joi.string().min(3).max(10).required(),
                    email:Joi.string().required().email(),
                    password:Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
                    repeat_password:Joi.ref('password')
                });
                const {error}=registerSchema.validate(req.body);
                if(error){
                    return next(error);
                }
                res.json({msg:"Hello from register"})

            }
        }
        export default registerController;

    - Update the .env file -> add a variable to check the mode development/production
        App_PORT=5000
        DEBUG_MODE=true

    - Update the cofig - include the DEBUG_MODE to config/index.js
        import dotenv from 'dotenv';
        dotenv.config();
        export const {
            APP_PORT,DEBUG_MODE
        } = process.env;

    - create a Error Handler -> middlewares/errors/errorHandler.js
        import { DEBUG_MODE } from "../../config";
        import { ValidationError } from "joi";

        const errorHandler=(err,req,res,next)=>{
            let statusCode = 500;
            let data={
                message:'Internal server error',
                ...(DEBUG_MODE==='true' && {originalError:err.message})
            }

            if(err instanceof ValidationError){
                statusCode=422;
                data={
                    message:err.message
                }
            }

            return res.status(statusCode).json(data);
        }
        export default errorHandler;

    - Update the server.js - add the middleware errorHandler
        import errorHandler from './middlewares/errors/errorHandler';
        app.use(express.json());
        app.use('/api',routes);
        app.use(errorHandler);
    - Check with postman
        POST -> body -> raw
        {
            "name":"Kumar",
            "email":"kumarsauravks@gmail.com",
            "password":"Kumar123",
            "repeat_password":"Kumar123"
        }
-------------------------------------------------------------------------------
- Check if user already exist
    - Install mongoose
        - npm i mongoose
    - create a model for user - models/user.js
        import mongoose from "mongoose";
        const Schema= mongoose.Schema;
        const userSchema=new Schema({
            name:{type:String,required:true},
            email:{type:String,required:true,unique:true},
            password:{type:String,required:true},
            role:{type:String,default:'customer'}
        },{timestamps:true})
        export default mongoose.model('User', userSchema,'users');
    - export it through index.js -> models/index.js
        export {default as User} from './user'
    - create a service services/CustomErrorHandler.js for our custom error - User Already Exsist
        class CustomErrorhandler extends Error{
            constructor(status,msg){
                super();
                this.status=status;
                this.message=msg;
            }
            static alreadyExist(message){
                return new CustomErrorhandler(409,message)
            }
        }
        export default CustomErrorhandler;
    - using custom error handler -> update registerController.js
        import {User} from "../../models";
        import CustomErrorhandler from "../../services/CustomErrorHandler";
        const registerController={
            async register(req,res,next){.............
        //check if user already exist
        try{
            const exist = await User.exists({email:req.body.email});
            if(exist){
                return next(CustomErrorhandler.alreadyExist('This email is already taken.'))
            }
        }
        catch(err){
            return next(err);
        }
    - checking this custom error on top error handler -> update errorHandler.js
        if(err instanceof CustomErrorhandler){
            statusCode=err.status;
            data={
                message:err.message
            }
        }
    - to work with db provide the db url -> update the db url config/index.js
        export const{
            APP_PORT,DEBUG_MODE,DB_URL
        }=process.env;
    - update the .env file 
        DB_URL=mongodb://localhost:27017/rest-api?authSource=admin&w=1
    - update the server.js file
        //Database Connection
        mongoose.connect(DB_URL,{useNewUrlParser:true,useUnifiedTopology:true});
        const db=mongoose.connection;
        db.on('error',console.error.bind(console,'connection error'));
        db.once('open',()=>{
            console.log('DB Connected...!');
        })
----------------------------------------------------------------
- Now we need to Regigister a User in DB
    - Hash the password
        - npm i bcrypt
    - Create a token
        - npm i jsonwebtoken
        - to create a token we have to create it in service 
        - add the service service/JwtService.js
            import { JWT_SECRET } from "../config";
            import jwt from "jsonwebtoken";
            class JwtService{
                static sign(payload,expiry='60s',secret=JWT_SECRET){
                    return jwt.sign(payload,secret,{expiresIn:expiry})
                }
            }
            export default JwtService;
        - insert in Jwt secret in config
            JWT_SECRET=thisismysecret
    - update the registerController.js
        //hash password
        const hashedPassword=await bcrypt.hash(req.body.password,10);
        // prepare the model
        const{name,email,password}=req.body;
        const user=new User({
            name,
            email,
            password:hashedPassword
        });
        let access_token
        try{
            const result=await user.save();
            console.log(result);
            //token
            access_token= JwtService.sign({_id:result._id,role:result.role});

        }catch(err){
            return next(err);
        }
        res.json({access_token:access_token})
------------------------------------------------------------------
Now we have to create an api for Login
    - Create a loginController -> controllers/loginController.js
        import Joi from "joi"
        import { User } from "../../models";
        import bcrypt from 'bcrypt'
        import CustomErrorhandler from "../../services/CustomErrorHandler";
        import JwtService from "../../services/JwtService";
        const loginController={
            async login(req,res,next){
                //validation
                const loginSchema=Joi.object({
                    email:Joi.string().email().required(),
                    password:Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required()
                });
                const {error}=loginSchema.validate(req.body);
                if(error){
                    return next(error);
                }
                try{
                    const user=await User.findOne({
                        email:req.body.email
                    });
                    if(!user){
                        return next(CustomErrorhandler.wrongCredentials());
                    }
                    //compare the password
                    const match=await bcrypt.compare(req.body.password,user.password)
                    if(!match){
                        return next(CustomErrorhandler.wrongCredentials())
                    }
                    //Token
                    const access_token=JwtService.sign({
                        _id:user._id,
                        role:user.role
                    });
                    res.json({access_token})
                }catch(err){
                    return next(err);
                }

            }
        }
        export default loginController
    - Export it in index controllers/index.js
        export {default as loginController} from './auth/loginController'

    - Create a custom error for invalid credentials -> CustomErrorHandler.js
        static wrongCredentials(message='Username or password is wrong!'){
        return new CustomErrorhandler(401,message)
    }
    - Add route for login controller -> routes/index.js
        import {loginController} from '../controllers';
        routes.post('/login',loginController.login);
-------------------------------------------------------------------


    







