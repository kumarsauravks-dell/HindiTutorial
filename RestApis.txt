NodeJs + Express + MongoDb
Jwt Tokens + Upload Files to server 
-------------------------------------
1. Create a project
    - npm init -y
    - npm i express
    - npm i esm
    - npm i nodemon
    - npm i dotenv
    - create a .env file
        App_PORT=5000
    - create a file config/index.js  (index.js because jaha bhi import krna hoga to file name nhi dena hoga bas .config)
        import dotenv from 'dotenv';
        dotenv.config();

        export const {
            APP_PORT
        } = process.env;
    
    - create a server.js file
        import express from 'express';
        import { APP_PORT } from './config';

        const app=express();
        app.listen(APP_PORT,()=> console.log(`Listening on port ${APP_PORT}`))
    
    - change the pakage.json - add a script for development
        "scripts": {
            "dev": "nodemon -r esm server.js",
            "start":"node -r esm server.js"
        }
-------------------------------------------------
- ToDo List 
    - List of end point we will create
        Register a user
        Login a user
        Who am i
        Add new product
        Update a product]
        Get all products
        Get single product
        Delete a product

- Adding Routes for endpoints
    - Create a folder routes which contains index.js
        import express from 'express';
        const router=express.Router();
        export default router;
    - Add the router to server.js file
        import routes from './routes'
        app.use('api',routes);
-------------------------------------------------
- Add a controller to handle req and res controllers/auth/registerController
    const registerController={
        register(req,res,next){
                res.json({msg:"Hello from register"})
            }
        }
    export default registerController;
- Add a index file to controller - controllers/index.js
    export {default as registerController} from './auth/registerController'

- Update the routes/index.js file
    import { registerController } from '../controllers';
    const router=express.Router();
    router.post('/register',registerController.register);
- Check using postman
    POST - http://localhost:5000/api/register
------------------------------------------------------
Install joi validation for validations
- checklist
    validate the request
    authorise the request
    check if user is in the database already
    prepare model
    store in database
    generate jwt token
    send response
-----------------------------------------------------
Validation 
    - npm i joi
    - create validation for the registration data in controllers/auth/registerController.js
        import Joi, { string } from "joi";
        const registerController={
            register(req,res,next){

                const registerSchema=Joi.object({
                    name:Joi.string().min(3).max(30).required(),
                    email:string().required().email(),
                    password:string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
                    repeat_password:Joi.ref('password')
                });
                const {error}=registerSchema.validate(req.body);
                if(error){
                    return next(error);
                }
                res.json({msg:"Hello from register"})

            }
        }
        export default registerController;

    - Update the .env file -> add a variable to check the mode development/production
        App_PORT=5000
        DEBUG_MODE=true

    - Update the cofig - include the DEBUG_MODE to config/index.js
        import dotenv from 'dotenv';
        dotenv.config();
        export const {
            APP_PORT,DEBUG_MODE
        } = process.env;

    - create a Error Handler -> middlewares/errors/errorHandler.js
        import { DEBUG_MODE } from "../../config";
        import { ValidationError } from "joi";

        const errorHandler=(err,req,res,next)=>{
            let statusCode = 500;
            let data={
                message:'Internal server error',
                ...(DEBUG_MODE==='true' && {originalError:err.message})
            }

            if(err instanceof ValidationError){
                statusCode=422;
                data={
                    message:err.message()
                }
            }

            return res.status(statusCode).json(data);
        }
        export default errorHandler;

    - Update the server.js - add the middleware errorHandler
        import errorHandler from './middlewares/errors/errorHandler';
        app.use(express.json());
        app.use('/api',routes);
        app.use(errorHandler);
-------------------------------------------------------------------------------
- Check if user already exist
    - Install mongoose
        - npm i mongoose
    - create a model for user - models/user.js
    - create a service services/ for our custom error - User Already Exsist






